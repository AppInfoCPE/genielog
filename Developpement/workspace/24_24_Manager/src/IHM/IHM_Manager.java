package IHM;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


//import com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException;
import java.awt.Color;
import java.awt.Component;
import java.awt.List;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class IHM_Manager extends javax.swing.JFrame {

    /**
     * Creates new form IHM_Manager
     */
    public IHM_Manager() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        //DefaultListModel dlm= new DefaultListModel();
        //export data
        try
        {
            //  Connect to an Access Database
            Class.forName( driver );
            connection = DriverManager.getConnection( url, userid, password );

            //  Read data from a table

            String sql = "Select debut,fin from HEURES_POINTES";
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery( sql );
            ResultSetMetaData md = rs.getMetaData();
            int columns = md.getColumnCount();

            //  Get row data

            while (rs.next())
            {
                String debut=rs.getString("debut");
                String fin=rs.getString("fin");
                HeurePointe hp= new HeurePointe(debut,fin);
                dlm.addElement(hp);
            }

            rs.close();
            stmt.close();
            connection.close();
        }
        catch(Exception e)
        {
            System.out.println( e );
        }
        jList1 = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(Color.YELLOW);

        jTabbedPane1.setBackground(new java.awt.Color(241, 246, 190));

        jPanel1.setBackground(new java.awt.Color(241, 246, 190));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        //Object[][] data = {             };
        //String  title[] = {"Produit", "Seuil cuisson HP", "Seuil cuisson HN", "Nombre produit a cuire HP","Nombre produit a cuire HN","Prix"};
        //modelTable modelTableConfig = new modelTable(data, title);

        //Fullfill table
        Vector<Object> columnNames = new Vector<Object>();
        Vector<Object> data = new Vector<Object>();

        try
        {
            //  Connect to an Access Database

            Class.forName( driver );
            connection = DriverManager.getConnection( url, userid, password );

            //  Read data from a table

            String sql = "Select * from TYPEPRODUIT";
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery( sql );
            ResultSetMetaData md = rs.getMetaData();
            int columns = md.getColumnCount();

            //  Get column names

            for (int i = 1; i <= columns; i++)
            {
                columnNames.addElement( md.getColumnName(i) );
            }

            //  Get row data

            while (rs.next())
            {
                Vector<Object> row = new Vector<Object>(columns);

                for (int i = 1; i <= columns; i++)
                {
                    row.addElement( rs.getObject(i) );
                }

                data.addElement( row );
            }

            rs.close();
            stmt.close();
            connection.close();
        }
        catch(Exception e)
        {
            System.out.println( e );
        }

        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {

            @Override
            public Class getColumnClass(int column)
            {
                for (int row = 0; row < getRowCount(); row++)
                {
                    Object o = getValueAt(row, column);

                    if (o != null)
                    {
                        return o.getClass();
                    }
                }

                return Object.class;
            }
            public boolean isCellEditable(int row,int col){
                if(getValueAt(row, 8).toString().equals("Boisson") && col==3) return false;
                return true;
            }

        };
        //modelTable modelTableConfig = new modelTable(data, columnNames);
        jTable1.setModel(model);
        jTable1.setDefaultRenderer(Object.class, new MyTableCellRenderer());
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jTable1.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

                JLabel l = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                // l.setBorder(new LineBorder(Color.black, 1));

                l.setBackground(Color.decode("#C9F1FD"));

                return l;
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel3.setBackground(new java.awt.Color(223, 237, 214));

        jLabel1.setText("Ajout d'une heure de pointe");

        jLabel2.setText("Debut");

        jLabel3.setText("Fin");

        jButton1.setBackground(new java.awt.Color(218, 202, 251));
        jButton1.setText("Ajouter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("00:00:00");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("00:00:00");

        jList1.setModel(dlm);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jLabel4.setText("Choisir heure pointe");

        jButton3.setBackground(new java.awt.Color(218, 202, 251));
        jButton3.setText("Supprimer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(35, 35, 35))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(243, 243, 243))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jTextField2))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(31, 31, 31)
                .addComponent(jSeparator1)
                .addGap(4, 4, 4)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        jButton2.setBackground(new java.awt.Color(218, 202, 251));
        jButton2.setText("Enregistrer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(110, 110, 110)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Configuration", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        try {
            Class.forName( driver );
            connection = DriverManager.getConnection( url, userid, password );
            Statement stmt = connection.createStatement();
            String sql = null;
            for(int i=0;i<jTable1.getRowCount();i++){
                // System.out.println(table.getRowCount());

                String nomType=jTable1.getValueAt(i, 0).toString();
                float prix=(float) jTable1.getValueAt(i,1 );
                String chemin=jTable1.getValueAt(i, 2).toString();
                float tempCuisson=0.0f;
                if(jTable1.getValueAt(i, 3)!=null){
                    tempCuisson=(float) jTable1.getValueAt(i, 3);
                }
                int qteMiniHeureP=(int) jTable1.getValueAt(i, 4);
                int qteMiniHeureS= (int) jTable1.getValueAt(i,5 );
                int qteCuireHeureP=(int) jTable1.getValueAt(i, 6);
                int qteCuireHeureS=(int) jTable1.getValueAt(i, 7);
                String Cat=jTable1.getValueAt(i, 8).toString();
                int qteMiniStock=(int) jTable1.getValueAt(i, 9);
                int qteMaxStock=(int) jTable1.getValueAt(i, 10);

                if(Cat.equals("Boisson")){

                    sql = "UPDATE TYPEPRODUIT "
                    + "SET nomtype='"+nomType+"',"
                    + "prixtype="+prix+","
                    + "cheminimage='"+chemin+"',"
                    + "tempscuisson=NULL,"
                    + "qteminiheurepleine="+qteMiniHeureP+","
                    + "qteminiheurestandard="+qteMiniHeureS+","
                    + "qtecuireheurepleine="+qteCuireHeureP+","
                    + "qtecuireheurestandard="+qteCuireHeureS+","
                    + "categorie='"+Cat+"',"
                    + "qteministock="+qteMiniStock+","
                    + "qtemaxstock="+qteMaxStock+" "

                    + "WHERE  nomtype= '"+nomType+"'";

                }
                else{
                    sql = "UPDATE TYPEPRODUIT "
                    + "SET nomtype='"+nomType+"',"
                    + "prixtype="+prix+","
                    + "cheminimage='"+chemin+"',"
                    + "tempscuisson="+tempCuisson+","
                    + "qteminiheurepleine="+qteMiniHeureP+","
                    + "qteminiheurestandard="+qteMiniHeureS+","
                    + "qtecuireheurepleine="+qteCuireHeureP+","
                    + "qtecuireheurestandard="+qteCuireHeureS+","
                    + "categorie='"+Cat+"',"
                    + "qteministock="+qteMiniStock+","
                    + "qtemaxstock="+qteMaxStock+" "

                    + "WHERE  nomtype= '"+nomType+"'";
                }
                stmt.executeUpdate(sql);
            }

            stmt.close();
            connection.close();
        } catch (SQLException ex) {
            //Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            //Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this,
            "DB est bien updated");

    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:

        int response=JOptionPane.showConfirmDialog(this, "Are you sure?");

        if(response==0){

            HeurePointe hp;
            hp=(HeurePointe) jList1.getSelectedValue();
            HeurePointe hp1=new HeurePointe(hp);
            String debut=hp1.getDebut();
            String fin=hp1.getFin();
            ////DELETE DBB
            System.out.println(debut+" "+fin);
            try
            {
                //  Connect to an Access Database
                Class.forName( driver );
                connection = DriverManager.getConnection( url, userid, password );

                //  Read data from a table

                String sql = "DELETE FROM HEURES_POINTES WHERE debut='"+debut+"' AND fin='"+fin+"'";
                Statement stmt = connection.createStatement();
                int rs=stmt.executeUpdate(sql );

                //  Get row data

                /*while (rs.next())
                {
                    String debut=rs.getString("debut");
                    String fin=rs.getString("fin");
                    HeurePointe hp= new HeurePointe(debut,fin);
                    dlm.addElement(hp);
                }*/

                stmt.close();
                connection.close();
            }
            catch(Exception e)
            {
                System.out.println( e );
            }

            dlm.removeElement(hp);
            jList1.setModel(dlm);
            JOptionPane.showMessageDialog(this,
                "DELETED");

        }
        else{
            System.out.println("CANCEL");
        }

    }                                        

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {                                    
        // TODO add your handling code here:
        HeurePointe hp;
        hp=(HeurePointe) jList1.getSelectedValue();
        HeurePointe hp1=new HeurePointe(hp);
        System.out.println(hp1);

    }                                   

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {                                        
        // TODO add your handling code here:

    }                                       

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        String debut=jTextField1.getText();
        String fin=jTextField2.getText();

        if(!isValidDate(debut) || !isValidDate(fin)){
            JOptionPane.showMessageDialog(this,
                "Incorrect Format",
                "Insane error",
                JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            SimpleDateFormat sdf = new SimpleDateFormat("H:mm:ss");
            Date dateDebut = null;
            Date dateFin = null;
            try {
                dateDebut =  sdf.parse(debut);
                dateFin =  sdf.parse(fin);
            } catch (ParseException e) {

            }

            if(dateDebut.after(dateFin)){
                JOptionPane.showMessageDialog(this,
                    "date debut doit < date fin",
                    "Insane error",
                    JOptionPane.ERROR_MESSAGE);
            }
            else{
                String debutTime = sdf.format(dateDebut);
                String finTime = sdf.format(dateFin);

                /*try
                {
                    Class.forName( driver );
                    connection = DriverManager.getConnection( url, userid, password );
                    //  Read data from a table
                    String sql = "Select debut,fin from HEURES_POINTES";
                    Statement stmt = connection.createStatement();
                    ResultSet rs = stmt.executeQuery( sql );
                    ResultSetMetaData md = rs.getMetaData();
                    int columns = md.getColumnCount();

                    //  Get row data

                    while (rs.next())
                    {
                        String debutList=rs.getString("debut");
                        String finList=rs.getString("fin");
                        HeurePointe hp= new HeurePointe(debutList,finList);
                        dlm.addElement(hp);
                    }

                    rs.close();
                    stmt.close();
                    connection.close();
                }
                catch(Exception e)
                {
                    System.out.println( e );
                }

                jList1.setModel(dlm);*/

                //System.out.println(debutTime+" "+finTime);
                try {
                    Class.forName( driver );
                    connection = DriverManager.getConnection( url, userid, password );
                    Statement stmt = connection.createStatement();
                    String sql = null;

                    stmt.executeUpdate("INSERT INTO HEURES_POINTES(DEBUT,FIN) VALUES('"+debutTime+"','"+finTime+"')");

                    stmt.close();
                    connection.close();

                    /////////////////
                    //Update JLIST///
                    ////////////////
                    HeurePointe hp= new HeurePointe(debutTime,finTime);
                    dlm.addElement(hp);
                    jList1.setModel(dlm);
                }  catch (ClassNotFoundException ex) {
                   // Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(IHM_Manager.class.getName()).log(Level.SEVERE, null, ex);
                }

                JOptionPane.showMessageDialog(this,
                    "Success");
                // HeurePointe hp=new HeurePointe();
            }

        }

    }                                        

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IHM_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IHM_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IHM_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IHM_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IHM_Manager().setVisible(true);
            }
        });
    }
    
    
    public boolean isValidDate( String dateStr ) {

    //    K: hour of the day in am/pm
    //    m: minute of a hour
    // 'on': static text
    //  MMM: name of the month with tree letters
    //   dd: day of the month (you can use just d too)
    SimpleDateFormat df = new SimpleDateFormat("H:mm:ss");

    try {
        System.out.println(df.parse( dateStr ));
        return true;
    } catch ( ParseException exc ) {
      System.out.println("Incorrect format!");
   
    }

    return false;

}
    
    
    

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration                   
    static String driver = "com.mysql.jdbc.Driver";
    static   String url ="jdbc:mysql://db4free.net:3306/managerappinfo";
    static    String userid = "julien";
    static    String password = "skateboard1";
    private static Connection connection =null;
    private DefaultListModel dlm= new DefaultListModel();
    private int getColumnByName(JTable table, String name) {
                for (int i = 0; i < table.getColumnCount(); ++i)
                    if (table.getColumnName(i).equals(name))
                        return i;
                return -1;
            }

}
